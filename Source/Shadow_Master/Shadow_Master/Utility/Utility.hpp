#pragma once

#include <string>
#include <vector>

#include "..\Math\Vector3.hpp"
#include "..\Math\Vector2.hpp"
#include "..\Engine\Texture.hpp"



namespace shadow
{
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	void DrawTextLine(std::string& TextToDraw, std::shared_ptr<Texture> Font, Vector2f& Position_TopLeftOfLine, Vector2f& size, Vector3f& Color, bool DrawBack, Vector3f BackColor );
	void DrawTextMultiLines(std::vector<std::string>& LinesToDraw, std::shared_ptr<Texture> Font, Vector2f& Position_TopLeftOfLine, Vector2f& size, Vector3f& Color, bool DrawBack, Vector3f BackColor );

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	bool getFileText( const std::string& filePath, std::string& outText );
	
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	void getShaderLog( GLuint idShader, std::string& outLog);
	
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	void getProgramLog( GLuint idShader, std::string& outLog);
	
	//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	void DrawCubeFace( 
		const Vector3f& faceNormal, 
		bool applyTexCoords, 
		bool applyNormals );

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	void DrawCube( 
		bool applyTexCoords = true, 
		bool applyNormals = true, 
		bool applyStandardFaceColors = false );

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	template< typename T>
	T clamp( T x, T min, T max)
	{
		return ( x < min ) ? min : ( x > max ) ? max : x;
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	unsigned int loadTexture( const char* szTexturePath );
	
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	template< typename vec_t >
	unsigned int loadVertexBufferObject( const vec_t& vertices )
	{
		return loadVertexBufferObject( vertices.data(),
										vertices.size() * sizeof( vertices.front() ));
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	template< typename vec_t >
	unsigned int loadIndexBufferObject( const vec_t& vertices )
	{
		return loadIndexBufferObject( vertices.data(),
										vertices.size() * sizeof( vertices.front() ));
	}
	
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	unsigned int loadVertexBufferObject( const void* pVertices, size_t nBytes );
	unsigned int loadIndexBufferObject( const void* pVertices, size_t nBytes );
	unsigned int LoadBufferObject( GLenum bufferType, const void* vertices, size_t bytes );
	
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	float Easein( float inValue, float inStart, float inEnd, float outStart, float outEnd );
	
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	void TranslateToPosition( Vector3f& start, Vector3f &end, float time);

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	bool pointInAABB3( Vector3f& point, int* min, int* max);

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	inline bool isKeyDown( int virtualKey )
	{
		return ( GetAsyncKeyState( virtualKey ) & 0x8000 ) == 0x8000;
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

}